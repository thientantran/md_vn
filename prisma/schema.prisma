// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String?
  role           String    @default("user")
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sessions       Session[]
  accounts       Account[]
  favoriteIds    String[]  @db.ObjectId
  Post           Post[]
  Comment        Comment[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    String @id @default(cuid()) @map("_id")
  name  String
  Posts Post[]
}

model Post {
  id          String    @id @default(cuid()) @map("_id")
  createdAt   DateTime  @default(now())
  title       String
  desc        String?
  img         String?
  isPublished Boolean   @default(false)
  views       Int       @default(0)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  userEmail   String
  user        User      @relation(fields: [userEmail], references: [email])
  comments    Comment[]
}

model Comment {
  id        String    @id @default(cuid()) @map("_id")
  createdAt DateTime  @default(now())
  desc      String
  userEmail String
  user      User      @relation(fields: [userEmail], references: [email])
  postId    String
  post      Post      @relation(fields: [postId], references: [id])
  parentId  String? // New field for the parent comment ID
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction) // New relation field for the parent comment
  replies   Comment[] @relation("CommentToComment") // New relation field for the replies
}
